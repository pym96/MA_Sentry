<launch>
    <arg name="robot_type" default="$(env ROBOT_TYPE)" doc="Robot type [standard, hero, engineer]"/>
    <arg name="ekf" default="false"/>
    <arg name="odom_tf" default="true"/>
    <arg name="balance" default="false"/>

    <rosparam file="$(find rm_config)/config/rm_controllers/$(arg robot_type).yaml" command="load"/>
    <rosparam if="$(arg ekf)" param="controllers/chassis_controller/enable_odom_tf">false</rosparam>

    <node name="controller_loader" pkg="controller_manager" type="controller_manager" output="screen"
          args="load
          controllers/joint_state_controller
          controllers/robot_state_controller
          controllers/trigger_calibration_controller
          controllers/cover_calibration_controller
          controllers/gimbal_calibration_controller
          controllers/anti_tip_bar_calibration_controller
          controllers/anti_tip_bar_controller
          controllers/balance_controller
          controllers/yaw_calibration_controller
          controllers/chassis_controller
          controllers/orientation_controller
          controllers/gimbal_controller
          controllers/shooter_controller
          "/>

    <group if="$(arg balance)">
        <param name="taskFile" value="$(find rm_balance_control)/config/mpc/task.info"/>
        <param name="libFolder" value="$(find rm_balance_control)/auto_generated"/>
    </group>

    <node if="$(arg ekf)" pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"
          clear_params="true">
        <rosparam command="load" file="$(find rm_chassis_controllers)/config/localization.yaml"/>
    </node>
    <node if="$(arg odom_tf)" pkg="tf2_ros" type="static_transform_publisher" name="odom_tf_publisher"
          args="0 0 0 0 0 0 1 map odom"/>
</launch>
