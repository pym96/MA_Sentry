 #if 0
        if(utils::in_patrol(vehicleX, vehicleY, 4, 5)){
            // Publishing random point. But how?
            // Generate a random point within bounds (-1, 1) for x, and (-2, 2) for y
            double randX = utils::random_double(-4.0, 5.0);
            double randY = utils::random_double(-4.0, 5.0);

            // Create and publish the random waypoint
            geometry_msgs::PointStamped random_point;
            random_point.header.stamp = ros::Time::now();
            random_point.header.frame_id = "map"; // or any other relevant frame
            random_point.point.x = randX;
            random_point.point.y = randY;
            ROS_INFO("Current random point is x:%f, y:%f", randX, randY);
            
            // if(!has_reached_){
            //     return BT::NodeStatus::FAILURE;
            // }

            way_point_pub_.publish(random_point);


            return BT::NodeStatus::FAILURE;
        }
        #endif


        while(ros::ok()){
                double elapsed = (ros::Time::now() - start_time).toSec();
                
                if (elapsed > 1.0) 
                  break;
                else   
                    continue;

            }.

            if(utils::in_patrol(vehicleX, vehicleY, 1 , 1))
          {
            // Publishing random point. But how?
            // Generate a random point within bounds (-1, 1) for x, and (-2, 2) for y
            ros::Time start_time = ros::Time::now();
            double randX = utils::random_double(-1.5, 1.5);
            double randY = utils::random_double(-1.5, 1.5);

            // Create and publish the random waypoint
            geometry_msgs::PointStamped random_point;
            random_point.header.stamp = ros::Time::now();
            random_point.header.frame_id = "map"; // or any other relevant frame
            random_point.point.x = randX;
            random_point.point.y = randY;
            ROS_INFO("Current random point is x:%f, y:%f", randX, randY);
            
            // if(!has_reached_){
            //     return BT::NodeStatus::FAILURE;
            // }

            way_point_pub_.publish(random_point);
            
            while(ros::ok()){
                double elapsed = (ros::Time::now() - start_time).toSec();
                
                if (elapsed > 1.0) 
                  break;
                else   
                    continue;

            }


            return BT::NodeStatus::FAILURE;
          }